import pytest
from grey_roots_backend import (
    GameState,
    Tela,
    QTEType,
    Player,
    Choices,
    QTEManager
)

# -----------------------------
# TESTES DE CLASSES AUXILIARES
# -----------------------------

def test_player_add_remove_items():
    p = Player()
    p.add_item("CHAVE")
    assert "CHAVE" in p.inventario
    p.add_item("CHAVE")  # não duplica
    assert p.inventario.count("CHAVE") == 1
    p.remove_item("CHAVE")
    assert "CHAVE" not in p.inventario
    p.remove_item("INEXISTENTE")  # não quebra
    assert p.inventario == []


def test_qtemanager_register_and_get():
    qm = QTEManager()
    qm.register_qte(QTEType.QTE1, "SUCESSO")
    qm.register_qte(QTEType.QTE1, "FALHA")
    assert qm.get_last_result(QTEType.QTE1) == "FALHA"

    qm.cleanup()
    assert qm.get_last_result(QTEType.QTE1) is None


def test_choices_cleanup():
    c = Choices()
    c.impacto1.append("teste")
    c.cleanup()
    assert c.impacto1 == []


# -----------------------------
# TESTES DE FLUXO DO GAMESTATE
# -----------------------------

def test_inicio_e_menu():
    jogo = GameState()
    jogo.start()
    assert jogo.tela_atual == Tela.MENU
    assert not jogo.finished


def test_menu_para_intro_e_nome():
    jogo = GameState()
    jogo.start()

    jogo.process_action("escolha", "1")
    assert jogo.tela_atual == Tela.INTRO

    jogo.process_action("ok")
    assert jogo.tela_atual == Tela.NOME

    jogo.process_action("input", "Lara")
    assert jogo.player.name == "Lara"
    assert jogo.tela_atual == Tela.CONFIRMA_NOME

    jogo.process_action("escolha", "2")  # Corrigir nome
    assert jogo.tela_atual == Tela.NOME


def test_fluxo_signo_confirmacao():
    jogo = GameState()
    jogo.start()
    jogo.tela_atual = Tela.SIGNO
    jogo.process_action("input", "Touro")
    assert jogo.player.planta == "Hâdia de Rudá"
    jogo.tela_atual = Tela.CONFIRMA_SIGNO
    jogo.process_action("escolha", "1")
    assert jogo.tela_atual == Tela.INICIO_DEMO


def test_fluxo_biblioteca_gavetas_lampiao():
    jogo = GameState()
    jogo.start()
    jogo.tela_atual = Tela.INICIO_DEMO
    jogo.process_action("ok")
    jogo.process_action("escolha", "1")  # Ir biblioteca
    assert jogo.tela_atual == Tela.BIBLIOTECA

    jogo.process_action("escolha", "1")  # Ir gavetas
    assert jogo.tela_atual == Tela.GAVETAS

    jogo.process_action("escolha", "1")  # Forçar gaveta
    assert "CHAVE VELHA" in jogo.player.inventario
    assert jogo.tela_atual == Tela.BIBLIOTECA_CHAVE

    jogo.process_action("escolha", "1")  # Pegar lampião
    assert "LAMPIÃO" in jogo.player.inventario


def test_fluxo_lampiao_sem_chave():
    jogo = GameState()
    jogo.start()
    jogo.tela_atual = Tela.BIBLIOTECA
    jogo.process_action("escolha", "2")  # Pegar lampião
    assert jogo.tela_atual == Tela.LAMPIAO
    jogo.process_action("escolha", "2")  # Não pegar
    assert jogo.tela_atual == Tela.BIBLIOTECA


def test_fluxo_buraco_e_cozinha_negociar_sucesso():
    jogo = GameState()
    jogo.start()
    jogo.tela_atual = Tela.COZINHA_CHOICE
    jogo.player.add_item("CHAVE VELHA")
    jogo.process_action("escolha", "1")  # negociar com chave
    assert "HERBÁRIO" in jogo.player.inventario
    assert jogo.tela_atual == Tela.FUGA


def test_fluxo_buraco_e_cozinha_negociar_falha():
    jogo = GameState()
    jogo.start()
    jogo.tela_atual = Tela.COZINHA_CHOICE
    jogo.process_action("escolha", "1")  # sem chave
    assert jogo.tela_atual == Tela.GAME_OVER


def test_fluxo_qte_sucesso_e_falha():
    jogo = GameState()
    jogo.start()
    jogo.tela_atual = Tela.COZINHA_CHOICE
    jogo.process_action("escolha", "2")  # ativa QTE
    assert jogo.tela_atual == Tela.QTE

    jogo.process_action("qte", "SUCESSO")
    assert "HERBÁRIO" in jogo.player.inventario

    jogo.tela_atual = Tela.QTE
    jogo.process_action("qte", "FALHA")
    assert jogo.tela_atual == Tela.GAME_OVER


def test_fluxo_fuga_e_acougue():
    jogo = GameState()
    jogo.start()
    jogo.tela_atual = Tela.ACOUGUE
    jogo.player.add_item("CHAVE VELHA")
    jogo.process_action("escolha", "1")
    assert "salvou" in jogo.choices.crianca_salva[0].lower()

    jogo.tela_atual = Tela.ACOUGUE
    jogo.player.inventario.clear()
    jogo.process_action("escolha", "2")
    assert "não" in jogo.choices.crianca_salva[-1].lower()


def test_fluxo_outro_anfitriao_e_fim():
    jogo = GameState()
    jogo.start()
    jogo.tela_atual = Tela.OUTRO_ANFITRIAO
    jogo.process_action("ok")
    assert jogo.tela_atual == Tela.ESCOLHAS_FINAIS

    jogo.process_action("ok")
    assert jogo.finished


def test_valores_invalidos_no_menu():
    jogo = GameState()
    jogo.start()
    jogo.process_action("escolha", "x")  # valor inválido
    assert jogo.tela_atual == Tela.MENU  # deve permanecer


def test_definir_planta_por_signo_variacoes():
    jogo = GameState()
    plantas = {
        "áries": "Ira de Xandoré",
        "gêmeos": "Awôto de Polô",
        "câncer": "Áuéra de Jaci",
        "leão": "Alâdia de Guaraci",
        "virgem": "Ewûa de Sumé",
        "libra": "Inkã de Jurupari",
        "escorpião": "Anhangá",
        "sagitário": "Mangará de Tupã",
        "capricornio": "Fogo de Angra",
        "aquário": "Flauta de Akuanbuba",
        "peixes": "Rio de Caramuru"
    }
    for signo, planta in plantas.items():
        jogo.definir_planta_por_signo(signo)
        assert jogo.player.planta == planta


def test_get_estado_jogo_retorna_dict_completo():
    jogo = GameState()
    jogo.start()
    estado = jogo.get_estado_jogo()
    assert isinstance(estado, dict)
    assert "player" in estado
    assert "choices" in estado
    assert "qte" in estado
